require('dotenv').config();
const http = require('http');

const env = process.env;

const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const token = env.TELEGRAM_TOKEN || "token"; // Bot s·ª± th·∫≠t
var schedule = require('node-schedule'); // schedule
const { response } = require('express');
const bot = new TelegramBot(token, { polling: true });
const db = require('./asset/db');
const app = express();
const bodyParser = require('body-parser');
// module
const covid = require('./modules/covid19');
const data = require('./modules/gaixinh');
const sim = require('./modules/simsimi');
const addGroup = require('./modules/addGroup');

app.use(bodyParser.json())
app.use(
  bodyParser.urlencoded({
    extended: true,
  })
)
app.get('/', function (req, res) {
  res.send('Developed by H·ªØu Hi·∫øu')
})
app.get('/list-group',db.getListGroup);
app.post('/add-group',db.addGroup);
console.log("App n√†y ƒëang ch·∫°y port 3000");
app.listen(process.env.PORT || 3000);
// wakeup bot
setInterval(function () {
  http.get("http://gaixinhbot.herokuapp.com");
  console.log("Wakeup Heroku-Chan !!");
}, 300000); // every 5 minutes (300000)

bot.onText(/\. (.+)/, (msg, match) => {
  // 'msg' is the received Message from Telegram
  // 'match' is the result of executing the regexp above on the text content
  // of the message

  const chatId = msg.chat.id;
  const resp = match[1]; // the captured "whatever"
  sim.sim(resp).then(response => {
    var obj = JSON.parse(response);
    var msg = obj.success;
    bot.sendMessage(chatId, msg);
  });
  // send back the matched "whatever" to the chat
  
}); 
bot.onText(/\, (.+)/, (msg, match) => {
  // 'msg' is the received Message from Telegram
  // 'match' is the result of executing the regexp above on the text content
  // of the message

  const chatId = msg.chat.id;
  const resp = match[1]; // the captured "whatever"
  sim.sim(resp).then(response => {
    var obj = JSON.parse(response);
    var msg = obj.success;
    // bot.sendMessage(chatId, msg);
    var url = 'https://translate.google.com/translate_tts?ie=UTF-8&q='+msg+'&tl=vi&client=tw-ob';
    bot.sendAudio(chatId,url);
  });
  // send back the matched "whatever" to the chat
  
}); 
// Bot listen region
bot.on('message', async msg => {
  const text = msg.text.trim();
  const chatId = msg.chat.id;
  if (text.startsWith("/angi")){
    var monan = [
      'b√∫n b√≤ Hu·∫ø',
      'c∆°m',
      'g√¨ c≈©ng ƒë∆∞·ª£c'
    ];
    bot.sendMessage(chatId, "H√¥m nay ƒÉn " +monan[~~(Math.random()* monan.length)]);
  }
  if (text.startsWith("/sexy")){
    var url = 'https://translate.google.com/translate_tts?ie=UTF-8&q=Th·∫±ng ƒë·ªìi tru·ªµ n√†y&tl=vi&client=tw-ob';
    bot.sendAudio(chatId,url);
  }
  if (text.startsWith("/tudongguithongbaocovid")) {
    addGroup.addGroup(chatId).then(response =>{
      bot.sendMessage(chatId, "ƒê√£ ƒëƒÉng k√Ω!");
    });
   
  }
  if (text.startsWith("/help")) {
    var messageContent = "*Danh s√°ch c√°c l·ªánhh:\* \n";
    messageContent += "\- \/xinh : Xem ·∫£nh g√°i xinh ƒë·∫πp mlem mlem \n";
    messageContent += "\- \/angi : Ch·ªçn xem h√¥m nay s·∫Ω ƒÉn g√¨ \n";
    messageContent += "\- \/covid : Th√¥ng tin covid-19 H√† N·ªôi v√† Vi·ªát Nam\n";
    messageContent += "\- \/tudongguithongbaocovid : ƒêƒÉng k√Ω nh·∫≠n th√¥ng tin covid-19 H√† N·ªôi v√† Vi·ªát Nam\n";
    bot.sendMessage(chatId, messageContent, {
      parse_mode: "Markdown"
    });
  }
  if (text.startsWith("/xinh")) {
    data.data().then(response => {
      var obj = JSON.parse(response);
      var srcImg = obj['photo-url-1280'];
      // var caption = obj['photo-caption'];
      bot.sendPhoto(chatId, srcImg);

      // if(caption != ""){
      //   var result = convert(caption);
      // var result =  result.replace("https://facebook.com/gaixinhchonloc",'');
      // var result =  result.replace("#gaixinhchonloc",'');
      // bot.sendMessage(chatId, result);
      // }
    }).catch(err => {
      bot.sendMessage(chatId, err);
    });
  }
  if (text.startsWith("/covid")) {
    // Write Javascript code here
    covid.covid().then(response => {
      var today = new Date();
      var date = today.getDate() + '\-' + (today.getMonth() + 1) + '\-' + today.getFullYear();
      var arr = response;
      var messageContent = "*Th√¥ng tin covid 19 (" + date + ")\* \n";
      messageContent += "H√† N·ªôi: \n";
      messageContent += "\- S·ªë ca h√¥m nay: " + arr.hanoi.casesToday + "\n";
      messageContent += "\- T·ªïng s·ªë ca: " + arr.hanoi.cases + "\n";
      messageContent += "\- T·ª≠ vong: " + arr.hanoi.death + "\n";
      messageContent += "C·∫£ n∆∞·ªõc: \n";
      messageContent += "\- T·ªïng s·ªë ca: " + arr.canuoc.cases + "\n";
      messageContent += "\- T·ª≠ vong: " + arr.canuoc.death + "\n";
      messageContent += "\- ƒêang ƒëi·ªÅu tr·ªã: " + arr.canuoc.treating + "\n";
      messageContent += "\- Ph·ª•c h·ªìi: " + arr.canuoc.recovered + "\n";
      bot.sendMessage(chatId, messageContent, {
        parse_mode: "Markdown"
      });
    }).catch(err => {
      console.log(err);
      bot.sendMessage(chatId, "L·ªói");
    })
  }
  if (text.startsWith("/khen")) {
    var loikhen = [
      ' xinh ƒë·∫πp vcl',
      ' l√† 1 con b√≥ng ch√≠nh hi·ªáu',
      ' , b·∫°n l√† ti√™n n·ªØ gi√°ng tr·∫ßn',
      ' d·ªÖ th∆∞∆°ng qu√°, cho n·ª±ng c√°i',
      ' l√† ng∆∞·ªùi con g√°i ƒë·∫πp nh·∫•t t√¥i t·ª´ng g·∫∑p',
      ' th·∫≠t m·∫°nh m·∫Ω',
      ' l√† con b√≥ng g·ªìng',
      ' -> ch√∫a t·ªÉ b√™ ƒë√™',
      ' g√¨ c≈©ng bi·∫øt, g√¨ c≈©ng hay',
      ' l√† nh·∫•t, l√† s·ªë m·ªôt',
    ];
    var name = msg.from.first_name + " " + msg.from.last_name +loikhen[~~(Math.random()* loikhen.length)];
    bot.sendMessage(chatId, name);
  }

  // tinh nang bi mat
  if (removeAccents(text).toLowerCase().replace(" ", "").includes("quanganh")) {
    // console.log(removeAccents(text).toLowerCase().replace(" ",""));
    var name = "·ªêi d·ªìi √¥i l√†ng n∆∞·ªõc ∆°i, ai ƒë√≥ v·ª´a nh·∫Øc ƒë·∫øn m·ªπ n·ªØ Quang Anh k√¨a üòÆ";
    bot.sendMessage(chatId, name);
  }

  if (removeAccents(text).toLowerCase().replace(" ", "").includes("thai")) {
    var name = "Quang Anh y√™u Th√°i üòÆ";
    bot.sendMessage(chatId, name);
  }
});
var rule = new schedule.RecurrenceRule();
rule.hour = [07, 19];
rule.minute = 0;
  var s = schedule.scheduleJob(rule,function(){
    var today = new Date();
    // var date = today.getDate() + '\-' + (today.getMonth() + 1) + '\-' + today.getFullYear();
    bot.on('message', async msg => {
      chat_id.forEach(i =>
        covid.covid().then(response => {
          var today = new Date();
          var date = today.getDate() + '\-' + (today.getMonth() + 1) + '\-' + today.getFullYear();
          var arr = response;
          var messageContent = "*Th√¥ng tin covid 19 (" + date + ")\* \n";
          messageContent += "H√† N·ªôi: \n";
          messageContent += "\- S·ªë ca h√¥m nay: " + arr.hanoi.casesToday + "\n";
          messageContent += "\- T·ªïng s·ªë ca: " + arr.hanoi.cases + "\n";
          messageContent += "\- T·ª≠ vong: " + arr.hanoi.death + "\n";
          messageContent += "C·∫£ n∆∞·ªõc: \n";
          messageContent += "\- T·ªïng s·ªë ca: " + arr.canuoc.cases + "\n";
          messageContent += "\- T·ª≠ vong: " + arr.canuoc.death + "\n";
          messageContent += "\- ƒêang ƒëi·ªÅu tr·ªã: " + arr.canuoc.treating + "\n";
          messageContent += "\- Ph·ª•c h·ªìi: " + arr.canuoc.recovered + "\n";
          bot.sendMessage(i, messageContent, {
            parse_mode: "Markdown"
          });
      
        }).catch(err => {
          console.log(err);
          bot.sendMessage(chatId, "L·ªói");
        })
      );

    })
  })

function removeAccents(str) {
  var AccentsMap = [
    "a√†·∫£√£√°·∫°ƒÉ·∫±·∫≥·∫µ·∫Ø·∫∑√¢·∫ß·∫©·∫´·∫•·∫≠",
    "A√Ä·∫¢√É√Å·∫†ƒÇ·∫∞·∫≤·∫¥·∫Æ·∫∂√Ç·∫¶·∫®·∫™·∫§·∫¨",
    "dƒë", "Dƒê",
    "e√®·∫ª·∫Ω√©·∫π√™·ªÅ·ªÉ·ªÖ·∫ø·ªá",
    "E√à·∫∫·∫º√â·∫∏√ä·ªÄ·ªÇ·ªÑ·∫æ·ªÜ",
    "i√¨·ªâƒ©√≠·ªã",
    "I√å·ªàƒ®√ç·ªä",
    "o√≤·ªè√µ√≥·ªç√¥·ªì·ªï·ªó·ªë·ªô∆°·ªù·ªü·ª°·ªõ·ª£",
    "O√í·ªé√ï√ì·ªå√î·ªí·ªî·ªñ·ªê·ªò∆†·ªú·ªû·ª†·ªö·ª¢",
    "u√π·ªß≈©√∫·ª•∆∞·ª´·ª≠·ªØ·ª©·ª±",
    "U√ô·ª¶≈®√ö·ª§∆Ø·ª™·ª¨·ªÆ·ª®·ª∞",
    "y·ª≥·ª∑·ªπ√Ω·ªµ",
    "Y·ª≤·ª∂·ª∏√ù·ª¥"
  ];
  for (var i = 0; i < AccentsMap.length; i++) {
    var re = new RegExp('[' + AccentsMap[i].substr(1) + ']', 'g');
    var char = AccentsMap[i][0];
    str = str.replace(re, char);
  }
  return str;
}